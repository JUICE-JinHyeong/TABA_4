-------------1. 테이블 생성하기 CREATE TABLE------------------

CREATE TABLE table_name
( column_name DATATYPE(SIZE), column_name DATATYPE(SIZE), ...);

TABLESPACE my_space #어떤 테이블 스페이스에 저장할건지

-------------1-1. 테이블 변경하기 ATLER TABLE--------------------

##컬럼 속성 변경##
ALTER TABLE table_name
MODIFY ( column_name 변경할 속성 내용들, column_name 변경할 속성 내용들, ...);

##컬럼 이름 변경##
ALTER TABLE table_name RENAME COLUMN column_name TO re_column_name;
	=> 제약조건 자동으로 이동 됨, 단 CHECK제약 조건의 경우 오류 발생 가능. 사용자가 ALTER TABLE문을 이용하여 제약조건 재정의 필요

##행 삭제하기##
ALTER TABLE table_name
DROP COLUMN column_name;

----------------1-2. 테이블 제거 DROP TABLE--------------------

DROP TABLE table_name;

#제거하려는 테이블의 기본 키가 다른 테이블의 참조 무결성 제약조건으로 정의된 경우 참조된 테이블은 바로 제거할 수 없음
#이런 경우 참조하는 테이블 먼저 제거 or 참조하는 테이블에 정의된 참조무결성 제약조건 제거

##참조하는 테이블에 정의된 참조 무결성 제약조건을 제거하는 방법
DROP TABLE table_name CASCADE CONSTRAINTS;

-----------------1-3. 테이블의 행 삭제하기 DELETE FROM-----------------
#열 이름은 유지하면서 해당 열의 데이터만 삭제하는 방법 

##모든 행을 삭제하는 쿼리
DELETE FROM table_name; 

##특정 조건에 맞는 행 삭제
DELETE FROM table_name WHERE column_name = 'value';

##테이블의 모든 데이터 삭제 및 테이블 구조 초기화 TRUNCATE
TRUNCATE TABLE table_name;

###TRUNCATE TABLE은 DELETE보다 더 빠르게 작동하지만, 삭제한 데이터 복구 불가 

-----------------1-4. 테이블 정보 조회하기---------------------

정적 뷰			설명
DBA_TABLES	   :	Tibero 내의 모든 테이블의 정보를 조회하는 뷰이다.
USER_TABLES	   :	현재 사용자에 속한 테이블의 정보를 조회하는 뷰이다.
ALL_TABLES	   :	현재 사용자가 접근 가능한 테이블의 정보를 조회하는 뷰이다.
DBA_TBL_COLUMNS  :	Tibero 내의 모든 테이블과 뷰에 속한 컬럼의 정보를 조회하는 뷰이다.
USER_TBL_COLUMNS :	현재 사용자에 속한 테이블 및 뷰에 속한 컬럼의 정보를 조회하는 뷰이다.
ALL_TBL_COLUMNS   :	현재 사용자가 접근 가능한 테이블 및 뷰에 속한 컬럼의 정보를 조회하는 뷰이다.

-----------------2. 제약조건	CONSTRAINT ---------------------

제약조건			설명

기본 키		: 무결성 제약조건과 고유 키 무결성 제약조건을 결합한 방법이다. 기본 키로 설정된 컬럼은 NULL 값을 가질 수 없다.

유일 키		: 테이블의 컬럼은 동일한 값을 가질 수 없다. 대신 NULL 값은 여러 컬럼에 입력할 수 있다.
참조 무결성	: 다른 테이블이나 현재 사용자가 소유한 테이블의 기본 키나 유일 키를 참조할 때 사용하는 방법이다.
NOT NULL	: 테이블의 컬럼은 NULL 값을 가질 수 없다. 테이블 레벨의 제약조건은 설정할 수 없다.
CHECK		: 삽입 또는 변경할 값이 만족해야 할 제약조건을 설정한다. 한 컬럼에 여러 개의 제약조건을 설정할 수 있다.


-----------------2-1. 제약조건의 이름 변경 RENAME CONSTRAINT---------------------

ALTER TABLE table_name
RENAME CONSTRAINT 제약조건별칭 TO 제약조건의_새로운_별칭;


-----------------2-2. 제약조건 변경 RENAME CONSTRAINT---------------------

ALTER TABLE table_name
ADD CONSTRAINT 제약조건별칭 CEHCK (예시 SALARY >= 50000);

ALTER TABLE table_name
ADD UNIQE (제약조건을 줄 열 이름들);


-----------------2-3. 제약조건 제거 DROP---------------------

ALTER TABLE table_name
DROP PRIMARY KEY #기본키가 설정된 제약조건 제거

ALTER TABLE table_name
DROP CONSTRAINT hyemin #hyemin인 제약조건을 제거


-----------------2-4. 제약조건 정보 조회---------------------

	정적 뷰				설명
DBA_CONSTRAINTS	:Tibero 내의 모든 제약조건의 정보를 조회하는 뷰이다.
USER_CONSTRAINTS	:현재 사용자에 속한 제약조건의 정보를 조회하는 뷰이다.
ALL_CONSTRAINTS		:사용자가 접근 가능한 제약조건의 정보를 조회하는 뷰이다.
DBA_CONS_COLUMNS	:Tibero 내의 모든 제약조건에 적용된 컬럼 정보를 조회하는 뷰이다.
USER_CONS_COLUMNS	:현재 사용자에 속한 제약조건에 적용된 컬럼 정보를 조회하는 뷰이다.
ALL_CONS_COLUMNS	:사용자가 접근 가능한 제약조건에 적용된 컬럼 정보를 조회하는 뷰이다.

-----------------3. 인덱스 생성 CREATE INDEX --------------

CREATE INDEX index_name ON table_name(column_name);

-----------------3-1. 인덱스 생성 DROP INDEX --------------

CREATE INDEX index_name;

-----------------4. 뷰 생성 CREATE VIEW-----------------

CREATE VIEW MANAGER AS #뷰 매니저 권한 주기
SELECT * FROM table_name
WHERE column_name = 1;

CREATE VIEW view_name AS #다른 사용자의 스키마에 있는 뷰를 생성하는 경우는 CREATE ANY VIEW문
	SELECT column_name, column_name, ...
	FROM table_name, ...
	WHERE ..

-----------------4-1. 뷰 변경 CREATE OR REPLACE VIEW-----------------

#뷰 또는 기반 객체의 변경으로 인해 사용할 수 없게 된 뷰를 다시 사용하기 위해서는 
#CREATE OR REPLACE VIEW 문을 사용해야 한다. 단, 뷰를 생성하고 제거할 수 있는 권한이 있어야 한다.

CREATE OR REPLACE VIEW MANAGER AS
SELECT * FROM table_name
WHERE column_name = 2;

#위와 같은 SQL 문장을 실행하면 다른 사용자에게 부여한 뷰 MANAGER의 권한이 그대로 남아 있게 된다. 
#반면에 DROP VIEW와 CREATE VIEW 문을 연속으로 사용하면 뷰 MANAGER의 권한은 없어진다.

-----------------4-2. 뷰 제거 DROP VIEW/DROP ANY VIEW-----------------

DROP VIEW view_name ;


------------------4-3. 뷰 정보 조회-------------------------

	정적 뷰				설명
DBA_VIEWS			:Tibero 내의 모든 뷰의 정보를 조회하는 뷰이다.
USER_VIEWS			:현재 사용자에 속한 뷰의 정보를 조회하는 뷰이다.
ALL_VIEWS			:사용자가 접근 가능한 뷰의 정보를 조회하는 뷰이다.
DBA_UPDATABLE_COLUMNS		:Tibero 내의 모든 뷰에 속한 컬럼의 갱신 가능성 정보를 조회하는 뷰이다.
USER_UPDATABLE_COLUMNS	:현재 사용자에 속한 뷰에 속한 컬럼의 정보를 조회하는 뷰이다.
ALL_UPDATABLE_COLUMNS		:사용자가 접근 가능한 뷰에 속한 컬럼의 갱신 가능성 정보를 조회하는 뷰이다.


-----------------5. 중복 행 찾기-----------------

SELECT column_name, COUNT(*)
FROM table_name
GROUP BY column_name
HAVING COUNT(*) > 1;


-----------------5-1. 중복 행 제거하기-----------------

DELETE FROM table_name 
WHERE ROWID NOT IN 
(
  SELECT MIN(ROWID) 
  FROM table_name 
  GROUP BY column_name
);


